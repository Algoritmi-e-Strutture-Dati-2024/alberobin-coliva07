{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh15440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
using namespace std;\
\
template <typename Tipo>\
class AlberoBin \{\
private:\
    Tipo elementi[100];\
    bool esiste[100];\
    int numeroNodi;\
\
public:\
    AlberoBin() \{\
        numeroNodi = 0;\
        for (int indice = 0; indice < 100; ++indice) \{\
            esiste[indice] = false;\
        \}\
    \}\
\
    bool vuoto() const \{\
        return numeroNodi == 0;\
    \}\
\
    void inserisciRadice(const Tipo& valore) \{\
        if (numeroNodi < 100) \{\
            elementi[0] = valore;\
            esiste[0] = true;\
            numeroNodi = 1;\
        \}\
    \}\
\
    Tipo leggiRadice() const \{\
        return vuoto() ? Tipo() : elementi[0];\
    \}\
\
    bool nodoFoglia(int posizione) const \{\
        if (!esiste[posizione]) return false;\
        int sinistro = 2 * posizione + 1;\
        int destro = 2 * posizione + 2;\
        return (sinistro >= 100 || !esiste[sinistro]) && (destro >= 100 || !esiste[destro]);\
    \}\
\
    int indiceSinistro(int posizione) const \{\
        int sinistro = 2 * posizione + 1;\
        return (sinistro < 100 && esiste[sinistro]) ? sinistro : -1;\
    \}\
\
    int indiceDestro(int posizione) const \{\
        int destro = 2 * posizione + 2;\
        return (destro < 100 && esiste[destro]) ? destro : -1;\
    \}\
\
    void aggiungiSinistro(int posizione, const Tipo& valore) \{\
        int sinistro = 2 * posizione + 1;\
        if (sinistro < 100 && esiste[posizione] && !esiste[sinistro]) \{\
            elementi[sinistro] = valore;\
            esiste[sinistro] = true;\
            ++numeroNodi;\
        \}\
    \}\
\
    void aggiungiDestro(int posizione, const Tipo& valore) \{\
        int destro = 2 * posizione + 2;\
        if (destro < 100 && esiste[posizione] && !esiste[destro]) \{\
            elementi[destro] = valore;\
            esiste[destro] = true;\
            ++numeroNodi;\
        \}\
    \}\
\
    void eliminaNodo(int posizione) \{\
        if (posizione < 100 && esiste[posizione]) \{\
            if (nodoFoglia(posizione)) \{\
                esiste[posizione] = false;\
                --numeroNodi;\
            \} else \{\
                int sinistro = 2 * posizione + 1;\
                int destro = 2 * posizione + 2;\
\
                if (sinistro < 100 && esiste[sinistro]) \{\
                    esiste[sinistro] = false;\
                    --numeroNodi;\
                \}\
\
                if (destro < 100 && esiste[destro]) \{\
                    esiste[destro] = false;\
                    --numeroNodi;\
                \}\
\
                esiste[posizione] = false;\
                --numeroNodi;\
            \}\
        \}\
    \}\
\
    void mostraAlbero() const \{\
        for (int indice = 0; indice < 100; ++indice) \{\
            if (esiste[indice]) \{\
                cout << "Nodo " << indice << ": " << elementi[indice] << endl;\
\
                int sinistro = indiceSinistro(indice);\
                int destro = indiceDestro(indice);\
                \
                if (sinistro != -1 && esiste[sinistro]) \{\
                    cout << "  Figlio sinistro: " << elementi[sinistro] << endl;\
                \} else \{\
                    cout << "  Figlio sinistro: /" << endl;\
                \}\
\
                if (destro != -1 && esiste[destro]) \{\
                    cout << "  Figlio destro: " << elementi[destro] << endl;\
                \} else \{\
                    cout << "  Figlio destro: /" << endl;\
                \}\
            \}\
        \}\
    \}\
\};\
\
}